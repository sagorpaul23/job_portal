import {useRouter} from 'next/router';
import {useState} from "react";
import {Button, Card, Col, Form, Input, message, Row, Upload} from "antd";
import styles from "../../../../styles/PublicJobDetailsPage.module.scss";
import Head from "next/head";
import {MdArrowBackIosNew} from "react-icons/md";
import PageHeader from "../../../../Components/PageHeader/PageHeader";
import axios from "../../../../Config/axios";
import {CountryPhoneInput} from "antd-country-phone-input";
import {InboxOutlined} from "@ant-design/icons";

const applyjob = () => {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const [loading, setLoading] = useState(false)
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const [uploadFile, setUploadFile] = useState([])
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const router = useRouter();
    let id = router?.query?.jobId
    const normFile = (e) => {
        if (Array.isArray(e)) {
            return e;
        }
        return e?.fileList;
    };
    const onRemoveFile = (e) => {
        setUploadFile((prev) => prev.filter((f) => f?.name !== e?.name));
    }
    const handleImageUpload = async (options) => {
        const {onSuccess, onError, file} = options;
        const fmData = new FormData();
        fmData.append("file", file);
        try {
            // add your upload image api here
            // console.log(file)
            const res = await axios.post("/organizations/commons/files", fmData, {withCredentials: true});
            // console.log(res)
            message.success(res.data.msg)
            setUploadFile([...uploadFile, {id: res.data.results.id, name: res.data.results.name}])
            // call onSuccess function if you have successfully uploaded the image
            onSuccess("Ok");
            // show success message
            message.success("file uploaded successfully");
        } catch (err) {
            // call onError if your upload is failed
            onError({err});
            // and show notification
            message.error("Failed to upload image");
        }
    };

    const PHONE_REGEX = /^[]?[(]?[0-9]{3}[)]?[-\s]?[0-9]{3}[-\s]?[0-9]{4,6}$/;
    const onFinish = (values) => {
        setLoading(true)
        values.job_opening = parseInt(id)
        values.phone_number = (values?.phone_number?.code).toString() + values?.phone_number?.phone
        values.cv = 'https://www.africau.edu/images/default/sample.pdf'
        // console.log(values)
        axios.post(`/public/hr/hiring/job-applications`, values)
            .then(res => {
                // console.log(res)
                message?.success(res?.data?.msg)
                setLoading(false)
                router.push('/jobs')
            })
            .catch(err => {
                console.log(err)
                message?.error(err?.response?.data?.msg)
                setLoading(false)
            })
    }
    return (
        <div className={styles.container}>
            <Head>
                <title>{}</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/download.png"/>
            </Head>
            <div className='page-header'>
                <div>
                    <Button
                        onClick={() => router.back()}
                        className={'button'}
                        icon={<MdArrowBackIosNew className={'icon'} size={16}/>}>
                    </Button>

                    <PageHeader title={'Job Apply'}/>
                </div>
            </div>
            <Card bordered={false}>
                <Form
                    layout={'vertical'}
                    scrollToFirstError={true}
                    autoComplete={"off"}
                    onFinish={onFinish}
                >
                    <Row gutter={[30, 15]}>
                        <Col xs={24} sm={24} md={12} lg={12}>
                            <Form.Item
                                label={'First Name'}
                                name={'first_name'}
                                rules={[
                                    {
                                        required: true,
                                        message: 'First name is required!',
                                    }
                                ]}
                            >
                                <Input placeholder={'Please write your first name'} maxLength={50} showCount/>
                            </Form.Item>

                            <Form.Item
                                label="Email"
                                name="email"
                                rules={[
                                    {
                                        required: true,
                                        message: 'Email is required!',
                                    },
                                    {
                                        pattern: /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
                                        message: "Invalid email address"
                                    }
                                ]}
                            >
                                <Input
                                    placeholder={"Please write a email"} type='email'/>
                            </Form.Item>

                            <Form.Item
                                label="Address"
                                name="address"
                                rules={[
                                    {
                                        required: true,
                                        message: 'Address is required!'
                                    }
                                ]}
                            >
                                <Input.TextArea
                                    placeholder={"Please write address"}
                                    rows={4}
                                    showCount
                                    maxLength={500}/>
                            </Form.Item>
                        </Col>
                        <Col xs={24} sm={24} md={12} lg={12}>
                            <Form.Item
                                label={'Last Name'}
                                name={'last_name'}
                                rules={[
                                    {
                                        required: true,
                                        message: 'Last name is required!',
                                    }
                                ]}
                            >
                                <Input placeholder={'Please write your last name'} maxLength={50} showCount/>
                            </Form.Item>

                            <Form.Item
                                label="Phone Number"
                                name="phone_number"
                                initialValue={{
                                    short: 'bd',
                                }}
                                rules={[
                                    {
                                        required: true,
                                        message: 'Phone number is required!'
                                    },
                                    {
                                        validator: (_, value) => {
                                            if (value.phone === '' || value.phone === undefined) {
                                                return Promise.reject("Phone number is required!")
                                            } else if ((value?.code)?.toString() === "880" && parseInt(value.phone[0]) === 0) {
                                                return Promise.reject("Phone number first digit must be except 0")
                                            } else if (value?.phone !== undefined) {
                                                if (value?.phone.length > 0) {
                                                    if (PHONE_REGEX.test(value.phone)) {
                                                        return Promise.resolve()
                                                    } else {
                                                        return Promise.reject("Please write a valid phone number!")
                                                    }
                                                } else {
                                                    return Promise.resolve()
                                                }
                                            } else {
                                                return Promise.resolve()
                                            }
                                        }
                                    }
                                ]}
                            >
                                <CountryPhoneInput
                                    inline
                                    placeholder={"Please write a phone number"}
                                    size={'middle'}
                                />
                            </Form.Item>

                            <Form.Item
                                label="Upload CV"
                                required={[
                                    {
                                        required: true,
                                        message: 'CV is required!'
                                    }
                                ]}
                            >
                                <Form.Item
                                    name="cv"
                                    valuePropName="fileList"
                                    getValueFromEvent={normFile}
                                    noStyle
                                    required={[
                                        {
                                            required: true,
                                            message: 'CV is required!'
                                        }
                                    ]}
                                >
                                    <Upload.Dragger
                                        multiple={true}
                                        customRequest={handleImageUpload}
                                        onRemove={e => onRemoveFile(e)}
                                        maxCount={1}
                                    >
                                        <p className="ant-upload-drag-icon">
                                            <InboxOutlined/>
                                        </p>
                                        <p className="ant-upload-text">Click or drag file to this area to upload</p>
                                        <p className="ant-upload-hint">Support single or bulk upload.</p>
                                    </Upload.Dragger>
                                </Form.Item>
                            </Form.Item>
                        </Col>
                    </Row>


                    <Button type="primary" htmlType='submit' loading={loading}>
                        Apply
                    </Button>

                </Form>
            </Card>
        </div>
    );
};

export default applyjob;